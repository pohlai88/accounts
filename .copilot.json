{
    "rules": [
        {
            "name": "V1 Architecture Compliance",
            "description": "Enforce V1 architectural patterns and prevent drift",
            "patterns": {
                "forbidden": [
                    {
                        "pattern": "style\\s*=\\s*[\"']",
                        "message": "❌ No inline styles - use tokens from packages/ui only"
                    },
                    {
                        "pattern": "from\\s+[\"']@aibos/db[\"']",
                        "files": [
                            "apps/web/**/*"
                        ],
                        "message": "❌ No direct DB access in UI - use typed hooks only"
                    },
                    {
                        "pattern": "new\\s+Date\\s*\\(",
                        "message": "⚠️ Consider using Temporal for date operations"
                    },
                    {
                        "pattern": ":\\s*any\\b",
                        "message": "❌ No 'any' types - use proper TypeScript types"
                    },
                    {
                        "pattern": "fetch\\s*\\(",
                        "files": [
                            "apps/web/**/*"
                        ],
                        "message": "❌ No direct fetch in UI - use typed API hooks"
                    }
                ],
                "required": [
                    {
                        "pattern": "export\\s+async\\s+function\\s+(GET|POST|PUT|DELETE|PATCH)",
                        "files": [
                            "apps/web-api/app/api/**/*.ts"
                        ],
                        "requires": "z\\.(object|string|number|boolean|array)",
                        "message": "❌ All API routes must use Zod validation"
                    },
                    {
                        "pattern": "(insert|update|delete)\\s*\\(",
                        "files": [
                            "apps/web-api/**/*.ts"
                        ],
                        "requires": "(auditService|logOperation|logError)",
                        "message": "❌ All mutations must include audit logging"
                    },
                    {
                        "pattern": "(payment|posting|journal).*route\\.ts",
                        "files": [
                            "apps/web-api/app/api/**/*.ts"
                        ],
                        "requires": "X-Idempotency-Key",
                        "message": "❌ Payment/posting endpoints must support idempotency"
                    }
                ]
            }
        }
    ],
    "suggestions": {
        "architecture": [
            "Use packages/contracts for all API types",
            "Implement RLS + SoD for all mutations",
            "Add audit logging with requestId + tenantId",
            "Use Temporal for date operations",
            "Prefer typed hooks over direct API calls",
            "Use tokens from packages/ui for styling"
        ],
        "security": [
            "Always scope operations with tenantId + companyId",
            "Validate SoD compliance before mutations",
            "Include idempotency keys for financial operations",
            "Log all security-relevant operations",
            "Use RLS policies for data access"
        ],
        "testing": [
            "Add unit tests for all posting rules",
            "Include edge-case tests for RLS policies",
            "Test SoD compliance scenarios",
            "Validate audit trail completeness",
            "Test idempotency behavior"
        ]
    },
    "codeTemplates": {
        "apiRoute": {
            "description": "V1 compliant API route template",
            "template": "export async function POST(request: NextRequest) {\n  const requestContext = createV1RequestContext(request);\n  const userContext = extractV1UserContext(request);\n  const auditService = getV1AuditService();\n  const auditContext = createV1AuditContext(requestContext, userContext);\n\n  try {\n    // Parse and validate request\n    const body = await request.json();\n    const validatedData = YourSchema.parse(body);\n\n    // Check SoD compliance\n    await checkSoDCompliance(userContext, 'your:operation');\n\n    // Your business logic here\n    \n    // Audit log success\n    await auditService.logOperation(auditContext, {\n      operation: 'your_operation',\n      data: validatedData\n    });\n\n    return NextResponse.json({ success: true });\n  } catch (error) {\n    await auditService.logError(auditContext, {\n      operation: 'your_operation',\n      error: error instanceof Error ? error.message : 'Unknown error'\n    });\n    \n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}"
        },
        "postingFunction": {
            "description": "V1 compliant posting function template",
            "template": "export async function postYourTransaction(\n  scope: Scope,\n  input: YourTransactionInput\n): Promise<PostingResult> {\n  // Validate input\n  const validatedInput = YourInputSchema.parse(input);\n  \n  // Check SoD compliance\n  await checkSoDCompliance(scope.userContext, 'transaction:post');\n  \n  // Generate journal entries\n  const journalEntries = generateJournalEntries(validatedInput);\n  \n  // Validate journal balance\n  validateJournalBalance(journalEntries);\n  \n  // Post to GL\n  const result = await insertJournal(scope, {\n    entries: journalEntries,\n    reference: validatedInput.reference,\n    description: validatedInput.description\n  });\n  \n  return result;\n}"
        }
    },
    "fileTemplates": {
        "testFile": {
            "description": "V1 compliant test file template",
            "extension": ".test.ts",
            "template": "import { describe, it, expect, beforeEach } from 'vitest';\nimport { YourFunction } from './your-module';\n\ndescribe('YourFunction', () => {\n  beforeEach(() => {\n    // Setup test data\n  });\n\n  it('should handle valid input', () => {\n    // Test implementation\n  });\n\n  it('should validate SoD compliance', () => {\n    // Test SoD validation\n  });\n\n  it('should generate audit trail', () => {\n    // Test audit logging\n  });\n\n  it('should handle edge cases', () => {\n    // Test edge cases\n  });\n});"
        }
    },
    "compliance": {
        "version": "1.0.0",
        "standard": "FINAL_NON-OPTIONAL_PLAN_V1.md",
        "lastUpdated": "2025-09-12",
        "enforces": [
            "No inline styles/raw CSS",
            "Zod validation for all APIs",
            "RLS + SoD for all mutations",
            "Audit logging with context",
            "Idempotency for financial ops",
            "Unit tests for posting rules",
            "Typed hooks over direct fetch"
        ]
    }
}