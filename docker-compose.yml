# ============================================================================
# AI-BOS Accounting SaaS - Production Docker Compose
# ============================================================================
# Production-ready container orchestration
# Follows security best practices and SSOT principles

version: "3.8"

# ============================================================================
# Services Configuration
# ============================================================================
services:
  # ============================================================================
  # Main Application Service
  # ============================================================================
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: aibos-accounting-api
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      # Application Environment
      - NODE_ENV=production
      - PORT=3001
      - HOST=0.0.0.0

      # Database Configuration
      - DATABASE_URL=${DATABASE_URL}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}

      # Redis Configuration
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - REDIS_DB=0

      # Security Configuration
      - TRUST_PROXY=true
      - CORS_ORIGIN=${CORS_ORIGIN:-http://localhost:3000}

      # API Configuration
      - API_VERSION=1.0.0
      - ENABLE_LOGGING=true
      - ENABLE_METRICS=true

      # Rate Limiting
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX_REQUESTS=100

    depends_on:
      redis:
        condition: service_healthy
    networks:
      - aibos-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ============================================================================
  # Redis Cache Service
  # ============================================================================
  redis:
    image: redis:7-alpine
    container_name: aibos-accounting-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    command: >
      redis-server
      --appendonly yes
      --requirepass ${REDIS_PASSWORD:-}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis_data:/data
    networks:
      - aibos-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # ============================================================================
  # Nginx Reverse Proxy (Optional)
  # ============================================================================
  nginx:
    image: nginx:alpine
    container_name: aibos-accounting-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - aibos-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

# ============================================================================
# Networks Configuration
# ============================================================================
networks:
  aibos-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ============================================================================
# Volumes Configuration
# ============================================================================
volumes:
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/redis
